name: 프론트엔드 배포
on:
  push:
    branches:
      - deploy
      - main
    paths:
      - shell-ui/**
      - home-ui/**
      - post-ui/**
      - blog-ui/**
      - login-ui/**
permissions: write-all
jobs:
  extract:
    runs-on: ubi9
    outputs:
      matrix: ${{ steps.extract-modules.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Extract module names from changed files
        id: extract-modules
        run: |
          changed_files="$(git diff-tree --no-commit-id --name-only -r ${{ github.sha }})"
          module_names=()
          for file in $changed_files; do
            module_name="${file%%/*}"
            [[ "$module_name" == "shell-ui" || 
               "$module_name" == "home-ui" || 
               "$module_name" == "post-ui" || 
               "$module_name" == "blog-ui" || 
               "$module_name" == "login-ui" ]] && module_names+=("$module_name")
          done
          module_names=($(printf '%s\n' "${module_names[@]}" | sort -u))
          echo "matrix=[$(printf '"%s",' "${module_names[@]}" | sed 's/,$//')]" >> $GITHUB_OUTPUT
  deploy:
    needs: extract
    runs-on: ubi9
    strategy:
      fail-fast: true
      matrix:
        SUBMODULE: ${{ fromJSON(needs.extract.outputs.matrix) }}
    env:
      SUBMODULE: ${{ matrix.SUBMODULE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          gradle-version: 8.7
      - name: Build
        env:
          GITHUB_USERNAME: ${{ secrets._GITHUB_USERNAME }}
          GITHUB_TOKEN: ${{ secrets._GITHUB_TOKEN }}
        run: gradle $SUBMODULE:build
      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: ${{ always() }}
        with:
          files: ${{ env.SUBMODULE }}/build/test-results/**/*.xml
      - name: Unpack
        run: |
          unzip -o -qq $SUBMODULE/build/libs/*.war "**/*.js" "**/*.css" "**.html" -d static | true
          unzip -o -qq $SUBMODULE/build/libs/*.war "**/*.ttf" -d static | true 
          unzip -o -qq $SUBMODULE/build/libs/*.war "**/*.woff2" -d static | true
          unzip -o -qq $SUBMODULE/build/libs/*.war "**/*.mp3" -d static | true
      - name: Gzip Compression
        run: |
          gzip_and_move() {
            find static -type f -name "*.$1" -exec sh -c 'gzip -9 "{}" && mv "{}.gz" "{}"' \;
          }  
          gzip_and_move css
          gzip_and_move js
          gzip_and_move html
      - name: Deploy
        env:
          AWS_ACCESS_KEY_ID_RELEASE: ${{ secrets.AWS_ACCESS_KEY_ID_RELEASE }}
          AWS_SECRET_ACCESS_KEY_RELEASE: ${{ secrets.AWS_SECRET_ACCESS_KEY_RELEASE }}
          S3_BUCKET_RELEASE: ${{ secrets.S3_BUCKET_RELEASE }}
          AWS_ACCESS_KEY_ID_CANDIDATE: ${{ secrets.AWS_ACCESS_KEY_ID_CANDIDATE }}
          AWS_SECRET_ACCESS_KEY_CANDIDATE: ${{ secrets.AWS_SECRET_ACCESS_KEY_CANDIDATE }}
          S3_BUCKET_CANDIDATE: ${{ secrets.S3_BUCKET_CANDIDATE }}
          AWS_DEFAULT_REGION: null
          S3_ENDPOINT: ${{ secrets.AWS_ENDPOINT}}
          DESTINATION: static
        run: |
          if [ "$GITHUB_REF_NAME" = "deploy" ]; then 
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_RELEASE
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_RELEASE
            BUCKET=$S3_BUCKET_RELEASE
          else 
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_CANDIDATE
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_CANDIDATE 
            BUCKET=$S3_BUCKET_CANDIDATE 
          fi
          aws s3 sync --endpoint-url $S3_ENDPOINT static s3://$BUCKET/$DESTINATION --acl public-read --content-encoding gzip