kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    alpha.image.policy.openshift.io/resolve-names: '*'
    app.openshift.io/route-disabled: 'false'
    app.openshift.io/vcs-uri: 'https://github.com/sayaya1090/sayaya.git'
    reloader.stakater.com/auto: 'true'
  name: login
  namespace: {{ .Release.Namespace }}
  finalizers:
    - foregroundDeletion
  labels:
    app: login
    app.kubernetes.io/component: login
    app.kubernetes.io/instance: login
    app.kubernetes.io/name: login
    app.kubernetes.io/part-of: login
    app.openshift.io/runtime: spring-boot
    app.openshift.io/runtime-namespace: {{ .Release.Namespace }}
    app.openshift.io/runtime-version: latest
spec:
  replicas: 1
  selector:
    matchLabels:
      app: login
  template:
    metadata:
      labels:
        app: login
        version: 0.0.1
        deployment: login
      annotations:
        sidecar.istio.io/inject: 'true'
    spec:
      volumes:
        - name: config
          configMap:
            name: login
            defaultMode: 420
        - name: postgres-config
          configMap:
            name: postgresql
            defaultMode: 420
        - name: vault-config
          configMap:
            name: vault
            defaultMode: 420
        - name: log-volume
          persistentVolumeClaim:
            claimName: log
      containers:
        - name: login
        {{- if .Values.image }}
          image: {{ .Values.image.name }}:{{ .Values.image.tag }}
        {{- else }}
          image: image-registry.openshift-image-registry.svc:5000/{{ .Release.Namespace }}/login:latest
        {{- end }}
          ports:
            - containerPort: 8080
              protocol: TCP
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
          env:
            - name: postgres.username
              valueFrom:
                secretKeyRef:
                  name: postgresql-app
                  key: username
            - name: postgres.password
              valueFrom:
                secretKeyRef:
                  name: postgresql-app
                  key: password
            - name: vault.token
              valueFrom:
                secretKeyRef:
                  name: vault
                  key: password
            - name: jwt.secret
              valueFrom:
                secretKeyRef:
                  name: sayaya-token-keypair
                  key: private-key
            - name: google.client-id
              valueFrom:
                secretKeyRef:
                  name: oauth-google-client
                  key: id
            - name: google.client-secret
              valueFrom:
                secretKeyRef:
                  name: oauth-google-client
                  key: secret
            - name: github.client-id
              valueFrom:
                secretKeyRef:
                  name: oauth-github-client
                  key: id
            - name: github.client-secret
              valueFrom:
                secretKeyRef:
                  name: oauth-github-client
                  key: secret
            - name: TZ
              value: Asia/Seoul
            - name: JAVA_TOOL_OPTIONS
              value: '-Xmx250m'
          volumeMounts:
            - name: config
              mountPath: /app/resources/application.yaml
              subPath: application.yaml
            - name: postgres-config
              mountPath: /app/resources/postgresql.yaml
              subPath: postgresql.yaml
            - name: vault-config
              mountPath: /app/resources/vault.yaml
              subPath: vault.yaml
            - name: log-volume
              mountPath: /var/log
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8080
              scheme: HTTP
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8080
              scheme: HTTP
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext: {}
      schedulerName: default-scheduler
      imagePullSecrets: []
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  revisionHistoryLimit: 2
  progressDeadlineSeconds: 600
  paused: false
